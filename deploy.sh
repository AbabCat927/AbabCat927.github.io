#!/bin/bash
# -----------------------------------------------------------------
#  一键部署博客文章脚本 (macOS/Linux 版 - v3)
#  功能: 自动使用固定的提交信息完成 git add, commit, 和 push 操作。
#        【修正】明确指定 Git 操作目录，避免因当前目录错误导致权限问题。
# -----------------------------------------------------------------

# --- 自动定位到脚本所在的目录 (你的博客根目录) ---
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
# 虽然我们下面会用 -C 参数，但这行 cd 仍然保留，作为双重保险。
cd "$SCRIPT_DIR"

# --- 步骤 1: 显示欢迎信息 ---
clear
echo ""
echo "================================================"
echo "  正在准备快速部署你的博客文章 (macOS 版)..."
echo "  目标 Git 仓库目录: $SCRIPT_DIR"
echo "================================================"
echo ""

# --- 步骤 2: 添加所有文件更改到暂存区 ---
echo "[步骤 1/3] 正在将 '$SCRIPT_DIR' 目录下的更改添加到暂存区..."
# 【关键修正】使用 'git -C <目录>' 参数
# -C "$SCRIPT_DIR" 明确告诉 Git 命令应该在哪个目录下执行，
# 这样它就不会错误地扫描你的用户主目录了。
git -C "$SCRIPT_DIR" add .
echo "文件添加成功!"
echo ""

# --- 步骤 3: 执行提交操作 (使用固定信息) ---
COMMIT_MESSAGE="更新博客内容"
echo "[步骤 2/3] 正在提交 '$SCRIPT_DIR' 仓库的更改..."
# 【关键修正】同样为 commit 命令添加 -C 参数
git -C "$SCRIPT_DIR" commit -m "$COMMIT_MESSAGE"
# 检查上一步 commit 是否成功。如果 add 没有找到任何改动，commit 会失败。
# $? 会保存上一个命令的退出状态码，0 代表成功，非 0 代表失败。
if [ $? -ne 0 ]; then
  echo ""
  echo "提交失败，可能原因：没有检测到任何文件改动。"
  # 如果 commit 失败（比如没有改动），就不继续执行 push
else
  echo "提交成功! (使用信息: \"$COMMIT_MESSAGE\")"
  echo ""

  # --- 步骤 4: 推送到远程仓库 (例如 GitHub) ---
  echo "[步骤 3/3] 正在推送 '$SCRIPT_DIR' 仓库的更改到 GitHub..."
  # 【关键修正】同样为 push 命令添加 -C 参数
  git -C "$SCRIPT_DIR" push
  echo ""
  echo "================================================"
  echo "  推送完成! 你的网站即将开始自动构建。"
  echo "================================================"
fi

echo ""
# --- 暂停脚本，等待用户按键 ---
read -p "按 [Enter] 键退出..."

