---
// 只加载最常用的字体权重，减少加载时间
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/700.css";

import ConfigCarrier from "@components/ConfigCarrier.astro";
import MusicPlayer from "@components/widget/MusicPlayer.svelte";
import Pio from "@components/widget/Pio.svelte"; // 使用 Svelte 版本的 Pio 组件
import { profileConfig, siteConfig } from "@/config";
// 【已修正 1】
// 错误原因：TypeScript 的 'allowImportingTsExtensions' 规则通常设置为 false，
// 推荐使用无后缀的模块导入路径，构建工具会自动寻找 .ts 或 .js 文件。
// 解决方案：为导入路径移除 .ts 后缀。
import { umamiConfig, widgetConfigs } from "../config";
import {
	BANNER_HEIGHT,
	BANNER_HEIGHT_EXTEND,
	BANNER_HEIGHT_HOME,
	DARK_MODE,
	DEFAULT_THEME,
	LIGHT_MODE,
	PAGE_WIDTH,
} from "../constants/constants";
import { defaultFavicons } from "../constants/icon";
import type { Favicon, SakuraConfig } from "../types/config";
import { pathsEqual, url } from "../utils/url-utils";

import "katex/dist/katex.css";
import "../styles/mobile-navbar.css";
import "../styles/wallpaper-navbar-transparent.css";
import "../styles/fancybox-custom.css";

interface Props {
	title?: string;
	banner?: string;
	description?: string;
	lang?: string;
	setOGTypeArticle?: boolean;
	postSlug?: string;
}

let { title, banner, description, lang, setOGTypeArticle, postSlug } =
	Astro.props;

// apply a class to the body element to decide the height of the banner, only used for initial page load
// Swup can update the body for each page visit, but it's after the page transition, causing a delay for banner height change
// so use Swup hooks instead to change the height immediately when a link is clicked
const isHomePage = pathsEqual(Astro.url.pathname, url("/"));

// defines global css variables
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue;

// 获取导航栏透明模式配置
const navbarTransparentMode =
	siteConfig.banner?.navbar?.transparentMode || "semi";
// 判断是否应该显示顶部高光效果（只在full和semifull模式下显示）
const shouldShowTopHighlight =
	navbarTransparentMode === "full" || navbarTransparentMode === "semifull";

// 获取默认banner图片的辅助函数
const getDefaultBanner = (): string => {
	const src = siteConfig.banner.src;
	if (typeof src === "string") {
		return src;
	}
	if (Array.isArray(src)) {
		return src[0] || "";
	}
	if (src && typeof src === "object") {
		// 优先使用desktop，如果没有则使用mobile
		const desktopSrc = (src as any).desktop;
		const mobileSrc = (src as any).mobile;
		if (typeof desktopSrc === "string") {
			return desktopSrc;
		}
		if (Array.isArray(desktopSrc) && desktopSrc.length > 0) {
			return desktopSrc[0];
		}
		if (typeof mobileSrc === "string") {
			return mobileSrc;
		}
		if (Array.isArray(mobileSrc) && mobileSrc.length > 0) {
			return mobileSrc[0];
		}
	}
	return "";
};

if (!banner || typeof banner !== "string" || banner.trim() === "") {
	banner = getDefaultBanner();
}

// TODO don't use post cover as banner for now
banner = getDefaultBanner();

const enableBanner = siteConfig.banner.enable;

let pageTitle: string;
if (title) {
	pageTitle = `${title} - ${siteConfig.title}`;
} else {
	pageTitle = siteConfig.subtitle
		? `${siteConfig.title} - ${siteConfig.subtitle}`
		: siteConfig.title;
}

let ogImageUrl: string | undefined;
if (siteConfig.generateOgImages && postSlug) {
	ogImageUrl = new URL(`/og/${postSlug}.png`, Astro.site).toString();
}

const favicons: Favicon[] =
	siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;

// const siteLang = siteConfig.lang.replace('_', '-')
if (!lang) {
	lang = `${siteConfig.lang}`;
}
const siteLang = lang.replace("_", "-");

const bannerOffsetByPosition = {
	top: `${BANNER_HEIGHT_EXTEND}vh`,
	center: `${BANNER_HEIGHT_EXTEND / 2}vh`,
	bottom: "0",
};
const bannerOffset =
	bannerOffsetByPosition[siteConfig.banner.position || "center"];

// 从 umamiConfig 中解构出所需的值，并提供默认值以增加代码健壮性
const {
	enabled: umamiEnabled = false,
	src: umamiSrc = "",
	websiteId: umamiWebsiteId = "",
} = umamiConfig || {};
---

<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] text-[14px] md:text-[16px]"
      data-overlayscrollbars-initialize
>
    <head>
        <script is:inline>
            // 【已修正 2, 3, 4】为第三方 GTM 脚本添加类型断言和空值检查，以解决 TypeScript 严格模式下的错误
            (function(w: any,d,s,l,i){
                w[l]=w[l]||[];
                w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});
                var f=d.getElementsByTagName(s)[0],
                // 类型断言：明确告诉 TypeScript，我们创建的 j 变量是一个 HTMLScriptElement
                j=d.createElement(s) as HTMLScriptElement,
                dl=l!='dataLayer'?'&l='+l:'';
                // 这样 TypeScript 就能理解 j 拥有 .async 和 .src 属性
                j.async=true;
                j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;
                // 空值检查：在调用 .parentNode 之前，先确保 f (父节点) 真实存在
                if (f && f.parentNode) {
                    f.parentNode.insertBefore(j,f);
                }
            })(window,document,'script','dataLayer','GTM-KRX3XGVH');
        </script>
        <script is:inline type="text/javascript">
            // 【已修正】为第三方 Clarity 脚本添加空值检查和类型断言
            (function(c,l,a,r,i,t: any,y: any){
                c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
                t=l.createElement(r);t.async=1;
                t.src="https://www.clarity.ms/tag/"+i;
                y=l.getElementsByTagName(r)[0];
                if (y && y.parentNode) { // 空值检查
                    y.parentNode.insertBefore(t,y);
                }
            })(window, document, "clarity", "script", "tjr3vkhj8i");
        </script>

        <title>{pageTitle}</title>

        <meta charset="UTF-8" />
        <meta name="description" content={description || pageTitle}>
        {siteConfig.keywords && siteConfig.keywords.length > 0 && (
            <meta name="keywords" content={siteConfig.keywords.join(', ')} />
        )}
        <meta name="author" content={profileConfig.name}>

        <meta property="og:site_name" content={siteConfig.title}>
        <meta property="og:url" content={Astro.url}>
        <meta property="og:title" content={pageTitle}>
        <meta property="og:description" content={description || pageTitle}>
        {ogImageUrl && <meta property="og:image" content={ogImageUrl} />}
        {
            setOGTypeArticle ? (
                <meta property="og:type" content="article" />
            ) : (
                <meta property="og:type" content="website" />
            )
        }

        <meta name="twitter:card" content="summary_large_image">
        <meta property="twitter:url" content={Astro.url}>
        <meta name="twitter:title" content={pageTitle}>
        <meta name="twitter:description" content={description || pageTitle}>

        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        {favicons.map(favicon => (
            <link rel="icon"
                  href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
                  sizes={favicon.sizes}
                  media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
            />
        ))}

        <script is:inline define:vars={{DEFAULT_THEME, LIGHT_MODE, DARK_MODE, BANNER_HEIGHT_EXTEND, PAGE_WIDTH, configHue}}>
            // Load the theme from local storage
            const theme = localStorage.getItem('theme') || DEFAULT_THEME;
            let isDark = false;
            switch (theme) {
                case LIGHT_MODE:
                    document.documentElement.classList.remove('dark');
                    isDark = false;
                    break
                case DARK_MODE:
                    document.documentElement.classList.add('dark');
                    isDark = true;
                    break
            }
            
            // Set the theme for Expressive Code based on current mode
            const expressiveTheme = isDark ? "github-dark" : "github-light";
            document.documentElement.setAttribute("data-theme", expressiveTheme);
            
            // 确保主题正确应用 - 解决代码块渲染问题
            // 使用 requestAnimationFrame 确保在下一帧检查主题状态
            requestAnimationFrame(() => {
                const currentTheme = document.documentElement.getAttribute('data-theme');
                if (currentTheme !== expressiveTheme) {
                    document.documentElement.setAttribute('data-theme', expressiveTheme);
                }
            });

            // Load the hue from local storage
            const hue = localStorage.getItem('hue') || configHue;
            document.documentElement.style.setProperty('--hue', hue);

            // calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
            let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
            offset = offset - offset % 4;
            document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
        </script>
        <style define:vars={{
            configHue,
            'page-width': `${PAGE_WIDTH}rem`,
        }}></style>  <slot name="head"></slot>

        <link rel="stylesheet" href="/pio/static/pio.css" />

        <link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>

        {umamiEnabled && umamiSrc && umamiWebsiteId && (
            <script
                is:inline
                async
                src={umamiSrc}
                data-website-id={umamiWebsiteId}
            ></script>
        )}
</head>
    <body class=" min-h-screen " class:list={[{"lg:is-home": isHomePage, "enable-banner": enableBanner, "zen-maru-gothic-enabled": siteConfig.font.zenMaruGothic.enable, "hanalei-enabled": siteConfig.font.hanalei.enable}]}
          data-overlayscrollbars-initialize
    >
        <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KRX3XGVH" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
        
        {shouldShowTopHighlight && <div class="top-gradient-highlight"></div>}
        <ConfigCarrier></ConfigCarrier>
        <slot />
        
        <MusicPlayer client:load />
        
        <Pio client:load />
        
        <div id="page-height-extend" class="hidden h-[300vh]"></div>

        {/* ... 你的樱花特效代码保持不变 ... */}
        {(widgetConfigs.sakura as SakuraConfig)?.enable && (
            <script define:vars={{ sakuraConfig: widgetConfigs.sakura }}>
                // ... (此处省略你的完整樱花特效 JS 代码)
            </script>
        )}
        
    </body>
</html>

<style is:global>
  html.is-changing {
    overflow: hidden;
  }
</style>

<style is:global define:vars={{
    bannerOffset,
    'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
    'banner-height': `${BANNER_HEIGHT}vh`,
}}>
@tailwind components;
@layer components {
    /* ... 你的样式代码保持不变 ... */
    .enable-banner.is-home #banner-wrapper {
        @apply h-[var(--banner-height-home)] translate-y-[var(--banner-height-extend)]
    }
    .enable-banner #banner-wrapper {
        @apply h-[var(--banner-height-home)]
    }

    .enable-banner.is-home #banner {
        @apply h-[var(--banner-height-home)] translate-y-0
    }
    .enable-banner #banner {
        @apply h-[var(--banner-height-home)] translate-y-[var(--bannerOffset)]
    }
    .enable-banner.is-home #main-grid {
        @apply translate-y-[var(--banner-height-extend)];
    }
    .enable-banner #top-row {
        @apply h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300
    }
    .enable-banner.is-home #sidebar-sticky {
        @apply top-[calc(1rem_-_var(--banner-height-extend))]
    }
    .navbar-hidden {
        @apply opacity-0 -translate-y-16
    }
    
    /* Water waves animation */
    .waves > .parallax use {
        animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
    }

    @keyframes wave {
        0% {
            transform: translate3d(-90px, 0, 0);
        }
        100% {
            transform: translate3d(85px, 0, 0);
        }
    }
}
</style>

<script>
// ... (此处省略你的大部分脚本，它们保持不变)
import { animationManager } from '../utils/animation-utils';
import 'overlayscrollbars/overlayscrollbars.css';
import {
    OverlayScrollbars,
} from 'overlayscrollbars';
import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils";
import {pathsEqual, url} from "../utils/url-utils";
import {
    BANNER_HEIGHT,
    BANNER_HEIGHT_HOME,
    BANNER_HEIGHT_EXTEND,
    MAIN_PANEL_OVERLAPS_BANNER_HEIGHT
} from "../constants/constants";
import { siteConfig } from '../config';

const bannerEnabled = !!document.getElementById('banner-wrapper')

function setClickOutsideToClose(panel: string, ignores: string[]) {
    // ...
}
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
// ...

function loadTheme() {
    // ...
}

function loadHue() {
    // ...
}

function initCustomScrollbar() {
    // ...
}

function showBanner() {
    // ...
}

function initCarousel() {
    // ...
}


const setup = () => {
    // 【关键修改 2, 3, 4】与你代码中已有的优化相同，保持不变
    (window as any).swup.hooks.on('visit:start', (visit: {to: {url: string}}) => {
        // ...
    });

    // 【关键修改 3】与你代码中已有的优化相同，保持不变
    (window as any).swup.hooks.on('visit:end', () => {
        // ...
    });


    // --- 以下是您文件中原有的其他钩子，我们保持不变 ---

    (window as any).swup.hooks.on('link:click', () => {
        // ...
    })

    (window as any).swup.hooks.on('content:replace', () => {
        // ...
    })

    // 【关键修改 2: 在 Swup 页面切换后手动跟踪】
    (window as any).swup.hooks.on('page:view', () => {
        // 修改原因: Swup 不会整页刷新，因此需要手动告诉 Umami 发生了页面浏览。
        // 'page:view' 钩子在页面内容完全加载并显示后触发，是记录浏览的最佳时机。
        if (typeof window.umami?.track === 'function') {
            window.umami.track();
            console.log('Umami page view tracked after swup transition.'); // 这行用于调试，可以安全地移除
        }

        // --- 以下是您文件中原有的逻辑 ---

        // hide the temp high element when the transition is done
        const heightExtend = document.getElementById('page-height-extend')
        if (heightExtend) {
            heightExtend.classList.remove('hidden')
        }
        
        // 同步主题状态 - 解决从首页进入文章页面时代码块渲染问题
        const storedTheme = localStorage.getItem('theme') || 'LIGHT_MODE';
        const isDark = storedTheme === 'DARK_MODE';
        const expectedTheme = isDark ? 'github-dark' : 'github-light';
        const currentTheme = document.documentElement.getAttribute('data-theme');
        
        // 如果主题不匹配，强制重新应用
        if (currentTheme !== expectedTheme) {
            document.documentElement.setAttribute('data-theme', expectedTheme);
            // 触发代码块重新渲染
            setTimeout(() => {
                window.dispatchEvent(new CustomEvent('theme-change'));
            }, 50);
        }
        
        // 检查当前页面是否为文章页面，如果是则触发自定义事件用于初始化评论系统
        setTimeout(() => {
            if (document.getElementById('tcomment')) {
                // 触发自定义事件，通知评论系统页面已完全加载
                const pageLoadedEvent = new CustomEvent('mizuki:page:loaded', {
                    detail: {
                        path: window.location.pathname,
                        timestamp: Date.now()
                    }
                });
                document.dispatchEvent(pageLoadedEvent);
                console.log('Layout: 触发 mizuki:page:loaded 事件，路径:', window.location.pathname);
            }
        }, 300);
    });
    
}

if ((window as any)?.swup?.hooks) {
    setup()
} else {
    document.addEventListener('swup:enable', setup)
}

// ... (此处省略你的 scroll, resize, Fancybox 等脚本，它们保持不变)
</script>

<script>
import { Fancybox } from "@fancyapps/ui";
// ... (Fancybox 代码)
</script>