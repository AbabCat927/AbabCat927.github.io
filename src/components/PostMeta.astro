---
// 文件路径: src/components/PostMeta.astro
// 功能: 显示文章的元数据，如日期、分类、标签，并集成了获取并显示单篇访问量的功能。
// 版本: v3.0 - 基于您的原始文件结构，升级了客户端 Umami 脚本。

// 1. 导入部分：完全保留您原始文件的导入
import { Icon } from "astro-icon/components";
import { profileConfig, umamiConfig } from "../config";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

// 2. 【核心修正】服务器端 Umami 配置解析
// 我们将在这里解析出新版 API 所需的所有信息
const umamiEnabled = umamiConfig.enabled || false;
// 从完整的分享链接（现在存储在 baseUrl 中）中提取 region 和 shareId
const fullShareUrl = umamiConfig.baseUrl || "";
const shareUrlParts = fullShareUrl.match(
	/https:\/\/([a-z]{2})\.umami\.is\/share\/([a-zA-Z0-9]+)/,
);
const region = shareUrlParts?.[1] || ""; // "us" 或 "eu"
const shareId = shareUrlParts?.[2] || ""; // 中间那串随机码
// 从跟踪脚本中提取 websiteId
const websiteId =
	umamiConfig.scripts.match(/data-website-id="([^"]+)"/)?.[1] || "";

// 3. Props 定义和解构：完全保留您原始文件的定义
export interface Props {
	published: Date;
	updated?: Date;
	category?: string;
	tags?: string[];
	hideUpdateDate?: boolean;
	hideTagsForMobile?: boolean;
	isHome?: boolean;
	className?: string;
	slug?: string;
}

const {
	published,
	updated,
	category,
	tags,
	hideUpdateDate,
	hideTagsForMobile,
	isHome,
	className = "",
	slug,
} = Astro.props;
---


<!-- 4. HTML 模板部分：完全保留您原始文件的结构 -->
<div class:list={["flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
    <!-- publish date -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- update date -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- categories -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- tags -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon">
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <div class:list={[{"hidden": i == 0}, "mx-1.5 text-[var(--meta-divider)] text-sm"]}>/</div>
                <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                   class="link-lg transition text-50 text-sm font-medium
                                hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                    {tag.trim()}
                </a>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>
    
    <!-- 访问量显示占位符：这里的 ID 'page-views-display' 很关键，我们的新脚本会用到它 -->
    {!isHome && umamiEnabled && slug && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:visibility-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium" id="page-views-display">统计加载中...</span>
        </div>
    )}
</div>

<!-- 5. 【核心修正】我们用全新的、健壮的客户端脚本替换掉原来的脚本 -->
{!isHome && umamiEnabled && slug && (
    <script define:vars={{ region, shareId, websiteId, slug }}>
        // 这个脚本只会在用户的浏览器中运行

        // 5.1. 定义一个异步函数，专门负责获取【单篇文章】的统计数据
        async function fetchPageViews() {
            // 首先，验证所有必需的配置信息是否都已从服务器端成功传递过来
            if (!region || !shareId || !websiteId || !slug) {
                console.error("[PostMeta.astro Script] Umami 配置不完整，无法获取统计。");
                return null;
            }
            
            try {
                // --- 采用两步验证法，安全地获取数据 ---

                // 第一步: 获取临时的访问令牌 (token)
                const tokenResponse = await fetch(`https://${region}.umami.is/api/share/${shareId}`);
                if (!tokenResponse.ok) throw new Error(`获取 Umami Token 失败: ${tokenResponse.status}`);
                const { token } = await tokenResponse.json();
                if (!token) throw new Error("Umami API 返回的数据中不包含 Token。");

                // 第二步: 使用 token 去请求【特定页面】的统计数据 (pageviews)
                // 根据您原始脚本的逻辑，构造文章页面的 URL 路径
                const pageUrl = `/posts/${slug}/`;
                const pageviewsApiUrl = new URL(`https://${region}.umami.is/api/websites/${websiteId}/pageviews`);
                pageviewsApiUrl.searchParams.append('url', pageUrl); 

                const statsResponse = await fetch(pageviewsApiUrl.toString(), {
                    method: 'GET',
                    headers: { 'Authorization': `Bearer ${token}` },
                });
                if (!statsResponse.ok) throw new Error(`获取 Umami 页面统计数据失败: ${statsResponse.status}`);
                
                return await statsResponse.json();

            } catch (error) {
                // 如果出错，在控制台清晰地打印错误信息
                console.error(`[PostMeta.astro Script] 获取页面 (${`/posts/${slug}/`}) 访问量时发生错误:`, error);
                return null;
            }
        }

        // 5.2. 定义一个函数，用于更新页面上的显示内容
        function updateDisplay(data) {
            // 找到 ID为 'page-views-display' 的元素
            const displayElement = document.getElementById('page-views-display');
            if (!displayElement) return;

            // 检查 API 返回的数据是否有效
            if (data && data.pageviews) {
                // API 返回的是一个按天统计的数组，我们需要将所有天数的访问量加起来得到总数
                const totalViews = data.pageviews.reduce((acc, cur) => acc + cur.y, 0);
                // 更新显示内容
                displayElement.textContent = `浏览量 ${totalViews}`;
            } else {
                // 如果获取失败，显示“不可用”
                displayElement.textContent = '统计不可用';
            }
        }
        
        // 5.3. 页面加载完成后，执行获取和更新操作
        async function initializePageViews() {
            const data = await fetchPageViews();
            updateDisplay(data);
        }

        // 这是最佳实践，确保在 DOM 完全加载后再执行脚本
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializePageViews);
        } else {
            initializePageViews();
        }
    </script>
)}

