---
// ==================================================================
// 文件路径: src/components/PostMeta.astro
// 功能描述: 这是一个用于显示文章元数据（如日期、分类、标签）的组件。
//           我们已将其升级，使其能够通过我们自建的 API 代理来安全地获取并显示单篇文章的访问量。
// 当前版本: v6.0 - 脚本逻辑已分离到外部模块，以实现与 Swup.js 的完全兼容。
// ==================================================================

// --- 1. 服务器端脚本 (`---` 块内) ---
// 这部分代码只会在服务器构建网站时运行一次，它的逻辑是完全正确的，我们保持不变。

// 从 Astro 的图标库导入 Icon 组件，用于显示小图标。
import { Icon } from "astro-icon/components";
// 从项目的主配置文件中导入 umamiConfig，其中包含了所有 Umami 相关的设置。
import { umamiConfig } from "../config";
// 从国际化 (i18n) 配置文件中导入翻译相关的工具。
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
// 导入一些实用工具函数，用于格式化日期和生成链接。
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

// 从 Umami 配置中解析出“是否启用”的状态，如果未定义则默认为 false。
const umamiEnabled = umamiConfig.enabled || false;

// 定义这个组件可以接收哪些属性 (Props)。这就像是组件的“说明书”。
export interface Props {
	published: Date; // 文章的发布日期 (必需)
	updated?: Date; // 文章的更新日期 (可选)
	category?: string; // 文章所属的分类 (可选)
	tags?: string[]; // 文章的标签列表 (可选)
	hideUpdateDate?: boolean; // 是否隐藏更新日期 (可选)
	hideTagsForMobile?: boolean; // 是否在移动端隐藏标签 (可选)
	isHome?: boolean; // 当前页面是否为首页 (可选)
	className?: string; // 允许外部传入自定义的 CSS 类名 (可选)
	slug?: string; // 文章的唯一标识符 (slug)，对于获取访问量至关重要 (可选)
}

// 从 Astro.props 中解构出所有传入的属性，并为 className 设置一个默认空字符串。
const {
	published,
	updated,
	category,
	tags,
	hideUpdateDate,
	hideTagsForMobile,
	isHome,
	className = "",
	slug,
} = Astro.props;
---

<!-- --- 2. HTML 模板部分 --- -->
<!-- 这部分定义了组件的结构，它会根据传入的属性动态显示内容。 -->
<!-- 这部分也保持不变，因为 data-slug 的传递方式是正确的。 -->

<div class:list={["flex flex-wrap text-neutral-500 dark-text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
    <!-- 发布日期 -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- 更新日期 -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- 分类 -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- 标签 -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon">
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <div class:list={[{"hidden": i == 0}, "mx-1.5 text-[var(--meta-divider)] text-sm"]}>/</div>
                <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                   class="link-lg transition text-50 text-sm font-medium
                                hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                    {tag.trim()}
                </a>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>
    
    <!-- 访问量显示区域 -->
    {!isHome && umamiEnabled && slug && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:visibility-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium" id="page-views-display" data-slug={slug}>统计加载中...</span>
        </div>
    )}
</div>

<!-- --- 3. 客户端脚本 (`<script>` 块) --- -->
<!-- 只有在满足所有条件时，这个脚本块才会被加载到页面中，以优化性能。 -->
{!isHome && umamiEnabled && slug && (
    <script>
        // 【核心修正】从我们新创建的外部模块中导入初始化函数。
        // Astro 会自动将这段代码处理成 <script type="module">，从而解决所有兼容性问题。
        import { initializePageViews } from '../../utils/umami-client.ts';

        // 在页面首次加载时，直接调用初始化函数。
        // 这个函数会去读取 <span> 元素上的 data-slug，然后获取并显示数据。
        initializePageViews();

        // 为了与 Swup 完美兼容，我们监听它的 'content:replace' 事件。
        // 每当 Swup 通过平滑过渡加载完新页面内容后，这个事件就会被触发。
        // 我们需要重新调用一次初始化函数，以确保新页面上的访问量也能被正确加载和显示。
        document.addEventListener('swup:content:replace', initializePageViews);
    </script>
)}

