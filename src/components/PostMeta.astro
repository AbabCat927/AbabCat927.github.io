---
// ==================================================================
// 文件路径: src/components/PostMeta.astro
// 功能描述: 这是一个用于显示文章元数据（如日期、分类、标签）的组件。
//           我们已将其升级，使其能够通过我们自建的 API 代理来安全地获取并显示单篇文章的访问量。
// 当前版本: v5.0 - 修复了与 Swup.js 的兼容性问题，通过 data-* 属性传递变量。
// ==================================================================

// --- 1. 服务器端脚本 (`---` 块内) ---
// 这部分代码保持不变，它的逻辑是完全正确的。

import { Icon } from "astro-icon/components";
import { umamiConfig } from "../config";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

const umamiEnabled = umamiConfig.enabled || false;

export interface Props {
	published: Date;
	updated?: Date;
	category?: string;
	tags?: string[];
	hideUpdateDate?: boolean;
	hideTagsForMobile?: boolean;
	isHome?: boolean;
	className?: string;
	slug?: string;
}

const {
	published,
	updated,
	category,
	tags,
	hideUpdateDate,
	hideTagsForMobile,
	isHome,
	className = "",
	slug,
} = Astro.props;
---

<!-- --- 2. HTML 模板部分 --- -->
<!-- 这部分定义了组件的结构，它会根据传入的属性动态显示内容。 -->

<div class:list={["flex flex-wrap text-neutral-500 dark-text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
    <!-- 发布日期 -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- 更新日期 -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- 分类 -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- 标签 -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon">
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <div class:list={[{"hidden": i == 0}, "mx-1.5 text-[var(--meta-divider)] text-sm"]}>/</div>
                <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                   class="link-lg transition text-50 text-sm font-medium
                                hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                    {tag.trim()}
                </a>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>
    
    <!-- 访问量显示区域 -->
    {!isHome && umamiEnabled && slug && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:visibility-outline-rounded" class="text-xl"></Icon>
            </div>
            {/* 【核心修正 1/2】在这里，我们将 slug 作为一个 data-slug 属性附加到 span 元素上。 */}
            {/* 这样做的好处是，客户端脚本可以通过标准 DOM API 来获取 slug，从而避免与 Swup 冲突。 */}
            <span class="text-50 text-sm font-medium" id="page-views-display" data-slug={slug}>统计加载中...</span>
        </div>
    )}
</div>

<!-- --- 3. 客户端脚本 (`<script>` 块) --- -->
{!isHome && umamiEnabled && slug && (
    // 【核心修正 2/2】我们移除了 <script> 标签中的 define:vars={{ slug }}。
    // 现在，脚本将从 DOM 元素中直接读取 slug。
    <script>
        // 定义一个异步函数，专门负责获取【单篇文章】的访问量数据。
        async function fetchPageViews(slug) { // 函数现在接收 slug 作为参数
            try {
                // 根据传入的文章 slug，构造出这篇文章在网站上的标准 URL 路径。
                const pageUrl = `/posts/${slug}/`;
                // 请求我们自建的 API 代理，并通过查询参数传递文章路径。
                const response = await fetch(`/api/umami-pageviews?url=${encodeURIComponent(pageUrl)}`);
                
                // 检查代理服务器的响应是否成功。
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `服务器代理响应失败: ${response.status}`);
                }
                // 如果成功，返回解析后的 JSON 数据。
                return await response.json();
            } catch (error) {
                // 如果出错，在控制台打印详细错误，并返回 null。
                console.error(`[PostMeta.astro Script] 通过代理获取页面 (${slug}) 访问量时出错:`, error);
                return null;
            }
        }

        // 定义一个函数，负责将获取到的数据更新到页面上。
        function updateDisplay(data) {
            // 通过 ID 找到用于显示访问量的 <span> 元素。
            const displayElement = document.getElementById('page-views-display');
            if (!displayElement) return; // 如果找不到元素，直接退出

            // 检查数据是否有效且包含 pageviews 数组。
            if (data && data.pageviews) {
                // 使用 reduce 方法累加每天的访问量，得到总数。
                const totalViews = data.pageviews.reduce((acc, cur) => acc + cur.y, 0);
                // 更新页面文本。
                displayElement.textContent = `浏览量 ${totalViews}`;
            } else {
                // 如果数据无效，显示“不可用”。
                displayElement.textContent = '统计不可用';
            }
        }

        // 定义初始化函数。
        async function initializePageViews() {
            // 首先，找到我们的显示元素。
            const displayElement = document.getElementById('page-views-display');
            // 如果找不到，或者元素上没有我们附加的 data-slug 属性，就直接退出，不做任何事。
            if (!displayElement || !displayElement.dataset.slug) return;
            
            // 从元素的 dataset 中安全地读取 slug。
            const slug = displayElement.dataset.slug;
            
            // 使用读取到的 slug 去获取数据。
            const data = await fetchPageViews(slug);
            // 用获取到的数据更新显示。
            updateDisplay(data);
        }

        // 确保在 DOM 加载完成后再执行我们的脚本。
        // 这是一个非常重要的健壮性保证。
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializePageViews);
        } else {
            initializePageViews();
        }

        // 【Swup 兼容性修正】为了应对 Swup 的页面转换，我们监听 Swup 的 'content:replace' 事件。
        // 当 Swup 加载新页面内容后，这个事件会被触发，我们就可以重新运行我们的初始化函数。
        document.addEventListener('swup:content:replace', initializePageViews);

    </script>
)}

