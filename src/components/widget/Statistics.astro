---
import { getCollection } from "astro:content";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import WidgetLayout from "./WidgetLayout.astro";

dayjs.extend(duration);

// --- 实用函数：计算文章字数（为了提高准确度，修改了正则，保留代码块内容） ---
function calculateWordCount(body: string): number {
	if (!body) {
		return 0;
	}

	// 【关键修改】：不再移除整个代码块，而是只移除外部的 Markdown 标记。
	// 注意：这将导致代码块内部的变量名、数字和中文注释都被计入字数。

	let cleanedText = body;

	// 1. 移除 HTML 标签 (如 iframe)
	cleanedText = cleanedText.replace(/<[^>]*>/g, "");

	// 2. 移除常见的 Markdown 格式标记和分隔符，但不移除英文单词和数字。
	// 这包括 #, *, `, ~, [, ], (, ), -, |, >, =, <, +, ! 等符号
	cleanedText = cleanedText
		.replace(/[#*`~[\]()\-|>=<+!]/g, " ") // 将标记替换为空格
		.replace(/\s+/g, " ") // 替换多个空格/换行符为一个空格
		.trim(); // 移除前后空白

	if (!cleanedText) {
		return 0;
	}

	// 3. 统计中文字符和英文单词，返回总和作为字数估算
	const chineseChars = cleanedText.match(/[\u4e00-\u9fa5]/g) || [];
	// 统计英文单词、数字和中文
	const englishWords = cleanedText.match(/\b[a-zA-Z0-9]+\b/g) || [];

	// 统计逻辑：中文字符数 + 英文单词数
	return chineseChars.length + englishWords.length;
}

// --- 数据计算部分 ---
const posts = await getCollection("posts", ({ data }) => {
	// 确保只统计已发布的文章 (draft: true 的文章不统计)
	return data.draft !== true;
});

const totalPosts = posts.length;

// 【最终修正】：由于插件注入的数据被 Astro Content Collection 过滤，
// 我们必须使用健壮的函数手动计算 post.body 的字数。
const totalWords = posts.reduce(
	(sum, post) => sum + calculateWordCount(post.body),
	0,
);

const formattedTotalWords = (num: number) => {
	if (num < 1000) return num.toString();
	// 将总字数格式化为 k (例如 123.4k)
	return `${(num / 1000).toFixed(1)}k`;
};

// --- 运营时间计算 ---
let runningTime = { years: 0, months: 0, days: 0 };
if (posts.length > 0) {
	// 找出第一篇文章的发布日期 (升序排序)
	const sortedPostsAsc = [...posts].sort(
		(a, b) =>
			new Date(a.data.published).getTime() -
			new Date(b.data.published).getTime(),
	);
	const firstPostDate = dayjs(sortedPostsAsc[0].data.published);
	const today = dayjs();
	// 计算运营时间差值
	const diff = dayjs.duration(today.diff(firstPostDate));
	runningTime = {
		years: diff.years(),
		months: diff.months(),
		days: diff.days(),
	};
}

// --- 最后更新时间计算 ---
let lastUpdated = "N/A";
if (posts.length > 0) {
	// 找出最近更新的文章日期 (降序排序)
	const sortedPostsDesc = [...posts].sort(
		(a, b) =>
			new Date(b.data.published).getTime() -
			new Date(a.data.published).getTime(),
	);
	lastUpdated = dayjs(sortedPostsDesc[0].data.published).format("YYYY-MM-DD");
}
---

<WidgetLayout name="站点信息" id="statistics">
    <div class="grid grid-cols-2 gap-x-4 gap-y-5 text-center">
        <div>
            <div class="text-sm text-gray-500 dark:text-gray-400">文章总数</div>
            <div class="text-xl font-bold">{totalPosts} <span class="text-xs">篇</span></div>
        </div>
        
        <div>
            <div class="text-sm text-gray-500 dark:text-gray-400">总字数</div>
            <div class="text-xl font-bold">{formattedTotalWords(totalWords)}</div>
        </div>

        <div>
            <div class="text-sm text-gray-500 dark:text-gray-400">运营时间</div>
            <div class="text-xl font-bold">
                {runningTime.years > 0 && `${runningTime.years} 年 `}
                {runningTime.months > 0 && `${runningTime.months} 月 `}
                {runningTime.days} <span class="text-xs">天</span>
            </div>
        </div>

        <div>
            <div class="text-sm text-gray-500 dark:text-gray-400">最后更新</div>
            <div class="text-xl font-bold">{lastUpdated}</div>
        </div>
    </div>
</WidgetLayout>
