---
// 文件路径: src/components/widget/Profile.astro
// 功能: 显示作者个人信息卡片，并集成了获取并显示全站总访问量的功能。
// 版本: v3.0 - 基于您的主题结构，升级了客户端 Umami 脚本。

// 1. 导入部分：基于您之前提供的主题文件结构
import { Icon } from "astro-icon/components";
import { profileConfig, umamiConfig } from "../../config";
import { url } from "../../utils/url-utils";
import ImageWrapper from "../misc/ImageWrapper.astro";

// 2. 【核心修正】服务器端 Umami 配置解析
// 我们在这里解析出新版 API 所需的所有信息，逻辑与 PostMeta.astro 中保持一致
const umamiEnabled = umamiConfig.enabled || false;
const fullShareUrl = umamiConfig.baseUrl || "";
const shareUrlParts = fullShareUrl.match(
	/https:\/\/([a-z]{2})\.umami\.is\/share\/([a-zA-Z0-9]+)/,
);
const region = shareUrlParts?.[1] || ""; // "us" 或 "eu"
const shareId = shareUrlParts?.[2] || ""; // 中间那串随机码
const websiteId =
	umamiConfig.scripts.match(/data-website-id="([^"]+)"/)?.[1] || "";
---

<!-- 3. HTML 模板部分：完全保留您原始文件的结构 -->
<div class="card-base p-3">
    <a aria-label="Go to About Page" href={url('/about/')}
       class="group block relative mx-auto mt-1 lg:mx-0 lg:mt-0 mb-3
       max-w-[12rem] lg:max-w-none overflow-hidden rounded-xl active:scale-95">
        <div class="absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50
        w-full h-full z-50 flex items-center justify-center">
            <Icon name="fa6-regular:address-card"
                  class="transition opacity-0 scale-90 group-hover:scale-100 group-hover:opacity-100 text-white text-5xl">
            </Icon>
        </div>
        <ImageWrapper src={profileConfig.avatar || ""} alt="Profile Image of the Author" class="mx-auto lg:w-full h-full lg:mt-0 "></ImageWrapper>
    </a>
    <div class="px-2">
        <div class="font-bold text-xl text-center mb-1 dark:text-neutral-50 transition">{profileConfig.name}</div>
        <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
        <div class="text-center text-neutral-400 mb-2.5 transition">{profileConfig.bio}</div>
        <div class="flex gap-2 justify-center mb-1">
            {profileConfig.links.length > 1 && profileConfig.links.map(item =>
                    <a rel="me" aria-label={item.name} href={item.url} target="_blank" class="btn-regular rounded-lg h-10 w-10 active:scale-90">
                        <Icon name={item.icon} class="text-[1.5rem]"></Icon>
                    </a>
            )}
            {profileConfig.links.length == 1 && <a rel="me" aria-label={profileConfig.links[0].name} href={profileConfig.links[0].url} target="_blank"
                                            class="btn-regular rounded-lg h-10 gap-2 px-3 font-bold active:scale-95">
                <Icon name={profileConfig.links[0].icon} class="text-[1.5rem]"></Icon>
                {profileConfig.links[0].name}
            </a>}
        </div>
        <!-- 访问量显示占位符：这里的 ID 'site-stats-display' 很关键，我们的新脚本会用到它 -->
        {umamiEnabled && (
            <div class="text-sm text-gray-500 mt-2 text-center">
                <Icon name="fa6-solid:eye" class="inline-block mr-1 text-gray-400 text-sm align-middle" />
                <span id="site-stats-display">统计加载中...</span>
            </div>
        )}
    </div>
</div>

<!-- 4. 【核心修正】我们用全新的、健壮的客户端脚本替换掉原来的脚本 -->
{umamiEnabled && (
    <script define:vars={{ region, shareId, websiteId }}>
        // 这个脚本只会在用户的浏览器中运行

        // 4.1. 定义一个异步函数，专门负责获取【全站】的统计数据
        async function fetchTotalSiteStats() {
            // 首先，验证所有必需的配置信息是否都已从服务器端成功传递过来
            if (!region || !shareId || !websiteId) {
                console.error("[Profile.astro Script] Umami 配置不完整，无法获取统计。");
                return null;
            }
            
            try {
                // --- 采用两步验证法，安全地获取数据 ---

                // 第一步: 获取临时的访问令牌 (token)
                const tokenResponse = await fetch(`https://${region}.umami.is/api/share/${shareId}`);
                if (!tokenResponse.ok) throw new Error(`获取 Umami Token 失败: ${tokenResponse.status}`);
                const { token } = await tokenResponse.json();
                if (!token) throw new Error("Umami API 返回的数据中不包含 Token。");

                // 第二步: 使用 token 去请求【全站】的统计数据 (stats)
                // 注意：这里的 API 端点与 PostMeta.astro 中的不同！
                const statsResponse = await fetch(`https://${region}.umami.is/api/websites/${websiteId}/stats`, {
                    method: 'GET',
                    headers: { 'Authorization': `Bearer ${token}` },
                });
                if (!statsResponse.ok) throw new Error(`获取 Umami 全站统计数据失败: ${statsResponse.status}`);
                
                return await statsResponse.json();

            } catch (error) {
                // 如果出错，在控制台清晰地打印错误信息
                console.error('[Profile.astro Script] 获取 Umami 总访问量时发生错误:', error);
                return null;
            }
        }

        // 4.2. 定义一个函数，用于更新页面上的显示内容
        function updateDisplay(stats) {
            const displayElement = document.getElementById('site-stats-display');
            if (!displayElement) return;

            // 检查 API 返回的数据是否有效
            if (stats && stats.pageviews && stats.visits) {
                // 更新显示内容，同时显示总浏览量和总访客数
                displayElement.textContent = `总浏览 ${stats.pageviews.value} · 总访客 ${stats.visits.value}`;
            } else {
                // 如果获取失败，显示“不可用”
                displayElement.textContent = '统计不可用';
            }
        }

        // 4.3. 页面加载完成后，执行获取和更新操作
        async function initializeStats() {
            const stats = await fetchTotalSiteStats();
            updateDisplay(stats);
        }

        // 这是最佳实践，确保在 DOM 完全加载后再执行脚本
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeStats);
        } else {
            initializeStats();
        }
    </script>
)}

